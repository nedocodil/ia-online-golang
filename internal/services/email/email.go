package email

import (
	"context"
	"crypto/tls"
	"fmt"
	"net/smtp"
	"strings"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ EmailService –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ SMTP
type EmailService struct {
	SMTPServer string
	SMTPPort   string
	Email      string
	Password   string
}

type EmailServiceI interface {
	SendEmail(ctx context.Context, toAddress, subject, body string) error
	SendActivationLink(ctx context.Context, toAddress string, activationLink string) error
	SendNewPassword(ctx context.Context, toAddress string, new_password string) error
}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ EmailService
func New(smtpServer, smtpPort, email, password string) *EmailService {
	return &EmailService{
		SMTPServer: smtpServer,
		SMTPPort:   smtpPort,
		Email:      email,
		Password:   password,
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
func (e *EmailService) SendEmail(ctx context.Context, toAddress, subject, body string) error {
	op := "EmailService.SendEmail"

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SMTP-—Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ TLS
	serverAddr := e.SMTPServer + ":" + e.SMTPPort
	tlsConfig := &tls.Config{
		InsecureSkipVerify: false, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true, –µ—Å–ª–∏ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
		ServerName:         e.SMTPServer,
	}

	conn, err := tls.Dial("tcp", serverAddr, tlsConfig)
	if err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %w", op, err)
	}
	defer conn.Close()

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π SMTP –∫–ª–∏–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ö TLS-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	client, err := smtp.NewClient(conn, e.SMTPServer)
	if err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SMTP –∫–ª–∏–µ–Ω—Ç–∞: %w", op, err)
	}
	defer client.Quit()

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	auth := smtp.PlainAuth("", e.Email, e.Password, e.SMTPServer)
	if err := client.Auth(auth); err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: %w", op, err)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	if err := client.Mail(e.Email); err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: %w", op, err)
	}

	// –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
	if err := client.Rcpt(toAddress); err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: %w", op, err)
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ SMTP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	w, err := client.Data()
	if err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: %w", op, err)
	}
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Content-Type –¥–ª—è HTML
	message := fmt.Sprintf("Subject: %s\r\nContent-Type: text/html; charset=UTF-8\r\n\r\n%s", subject, body)
	_, err = w.Write([]byte(message))
	if err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", op, err)
	}
	err = w.Close()
	if err != nil {
		return fmt.Errorf("%s: –æ—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: %w", op, err)
	}

	return nil
}

func (e *EmailService) SendActivationLink(ctx context.Context, toAddress string, activationLink string) error {
	op := "EmailService.SendActivationLink"

	htmlBody := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            color: #333;
            padding: 0;
            margin: 0;
        }
        .container {
            max-width: 600px;
            margin: 40px auto;
            background-color: #ffffff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .header {
            background-color: #7ed956;
            padding: 20px;
            text-align: center;
            color: white;
            font-size: 24px;
        }
        .content {
            display: flex;
            align-items: center;
            flex-direction: column;
            padding: 30px;
        }
        .button {
            display: inline-block;
            margin-top: 20px;
            padding: 12px 24px;
            background-color: #7ed956;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
        }
        .footer {
            margin-top: 40px;
            font-size: 12px;
            color: #999;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</div>
        <div class="content">
            <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üéâ</h2>
            <p>–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
            <a class="button" href="{{.ActivationLink}}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</a>
            <p class="footer">–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
        </div>
    </div>
</body>
</html>
`
	htmlBody = strings.Replace(htmlBody, "{{.ActivationLink}}", activationLink, -1)

	err := e.SendEmail(ctx, toAddress, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏", htmlBody)
	if err != nil {
		return fmt.Errorf("%s: %w", op, err)
	}

	return nil
}

func (e *EmailService) SendNewPassword(ctx context.Context, toAddress string, new_password string) error {
	op := "EmailService.SendPasswordCode"

	htmlBody := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            color: #333;
            padding: 0;
            margin: 0;
        }
        .container {
            max-width: 600px;
            margin: 40px auto;
            background-color: #ffffff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        .header {
            background-color: #7ed956;
            padding: 20px;
            text-align: center;
            color: white;
            font-size: 24px;
        }
        .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 30px;
        }
        .password-box {
            margin-top: 20px;
            background-color: #f0f0f0;
            padding: 15px;
            font-size: 18px;
            font-weight: bold;
            border-radius: 6px;
            word-break: break-all;
            text-align: center;
        }
        .footer {
            margin-top: 40px;
            font-size: 12px;
            color: #999;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å</div>
        <div class="content">
            <h2>–í–∞—à –Ω–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:</h2>
            <div class="password-box">{{.NewPassword}}</div>
            <p class="footer">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞.</p>
        </div>
    </div>
</body>
</html>
`
	htmlBody = strings.Replace(htmlBody, "{{.NewPassword}}", new_password, -1)

	err := e.SendEmail(ctx, toAddress, "–ù–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å", htmlBody)
	if err != nil {
		return fmt.Errorf("%s: %w", op, err)
	}

	return nil
}
